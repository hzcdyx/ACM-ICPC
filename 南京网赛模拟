#include <bits/stdc++.h>
using namespace std;
/* run this program using the console pauser or add your own getch, system("pause") or input loop */
int flag,v[110][110];
int ans,start;
int n,m;
list<int> d[210];
queue<int> c;
void qipai(int a)
{
    int j=a;
    for(int h=0; h<n; h++)
    {
        if(c.empty())
        {
            break;
        }
        else
        {
            d[j].push_back(c.front());
            c.pop();
            d[j].sort();
            j++;
            j=j%n;
        }
    }
}
int judge(int j)
{
    if(d[j].size()>0)
    {
        list<int>::iterator it=upper_bound(d[j].begin(),d[j].end(),ans);
        list<int>::iterator bit=lower_bound(d[j].begin(),d[j].end(),15);
        if(it!=d[j].end())
        {
            if(*it==ans+1)
            {
                ans=*it;
                d[j].erase(it);
                flag=0;
//            cout<<ans<<endl;
                if(d[j].size()==0)
                {
                    return 1;
                }
            }
        }

        else if(bit!=d[j].end())
        {
//            cout<<*bit<<endl;
            d[j].pop_back();
            flag=0;
            ans=2;
            if(d[j].size()==0)
            {
                return 1;
            }
        }
        else
        {
            if(flag==0)
            {
                flag=1;
                start=j;
            }
            else
            {
                if(flag==0&&start==j)
                {
                    qipai(j);

                }
            }
        }
    }
    else
    {
        return 1;
    }
    return 0;
}
int main(int argc, char** argv)
{
    int i,j,k,a,b,t;
    scanf("%d",&t);

    for(i=0; i<t; i++)
    {
        flag=0;

        while(!c.empty())
        {
            c.pop();
        }
        cin>>n>>m;
        for(j=0; j<m; j++)
        {
            cin>>b;
            if(b==1)
            {
                b=14;
            }
            if(b==2)
            {
                b=15;
            }
            c.push(b);
        }
        j=0;
        while(j<n) //模拟起牌
        {
            d[j].clear();
            for(k=0; k<5; k++)
            {
                if(!c.empty())
                {
                    d[j].push_back(c.front());
                    c.pop();
                }
                else
                {
                    break;
                }
            }
//            cout<<d[1].size();
            d[j].sort();
            j++;
        }
        j=0;
        ans=*d[j].begin();
        d[j].pop_front();
//        cout<<ans<<endl;
        j=1;
        while(true)  //模拟第一阶段打牌
        {
            int r=judge(j);
            if(r==1)
            {
                break;
            }
            else
            {
                j++;
                j=j%n;
            }
        }
        printf("Case #%d:\n",i+1);
        for(j=0; j<n; j++)
        {
            if(d[j].size()==0)
            {
                cout<<"Winner"<<endl;
            }
            else
            {
                int sum=0;
                list<int>::iterator it;
                for(it=d[j].begin(); it!=d[j].end(); it++)
                {
                    if(*it==14)
                    {
                        *it=1;
                    }
                    else if(*it==15)
                    {
                        *it=2;
                    }

                    sum+=*it;
//                    cout<<*it<<' '<<sum<<endl;
                }
                cout<<sum<<endl;
            }
        }
    }

    return 0;
}
